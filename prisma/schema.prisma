model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  displayname String 
  password  String?
  rank      String
  extraInformation String?
  activated Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  createdByOrderings Ordering[] @relation(name: "UserCreatorOrderings")
  updatedByOrderings Ordering[] @relation(name: "UserUpdaterOrderings")
  deletedByOrderings Ordering[] @relation(name: "UserDeleterOrderings")

  createdByMonthly MonthlyOrder[] @relation(name: "UserCreatorMonthlyOrder")
  updatedByMonthly MonthlyOrder[] @relation(name: "UserUpdaterMonthlyOrder")
  deletedByMonthly MonthlyOrder[] @relation(name: "UserDeleterMonthlyOrder")
}

model Product {
  id        Int      @id @default(autoincrement())
  identifier String @unique
  name      String
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  orderings Ordering[]
}

model Ordering {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  selectedMonth String
  category  String
  price     Decimal  @db.Decimal(9,2)
  quantity  Int
  createdBy Int
  creator   User     @relation(fields: [createdBy], references: [id], name: "UserCreatorOrderings")
  updatedBy Int
  updater   User     @relation(fields: [updatedBy], references: [id], name: "UserUpdaterOrderings")
  deletedBy Int?
  deleter   User?    @relation(fields: [deletedBy], references: [id], name: "UserDeleterOrderings")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model MonthlyOrder {
  id        Int      @id @default(autoincrement())
  selectedMonth String
  status String
  expectedPrice Decimal @db.Decimal(9,2)
  actualPrice Decimal @db.Decimal(9,2)
  reason String?
  expectedDeliveryDate String?
  createdBy Int
  creator   User     @relation(fields: [createdBy], references: [id], name: "UserCreatorMonthlyOrder")
  updatedBy Int
  updater   User     @relation(fields: [updatedBy], references: [id], name: "UserUpdaterMonthlyOrder")
  deletedBy Int?
  deleter   User?    @relation(fields: [deletedBy], references: [id], name: "UserDeleterMonthlyOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model SeedHistory {
  id        Int @id @default(autoincrement())
  seedName  String
  createdAt DateTime @default(now())
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
